//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				Uri resourceUri = new Uri("/MvvmLight1;component/SampleData/SampleDataSource/SampleDataSource.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private ItemCollection _collection = new ItemCollection();

		public ItemCollection Collection
		{
			get
			{
				return this._collection;
			}
		}

		private string _property1 = string.Empty;

		public string Property1
		{
			get
			{
				return this._property1;
			}

			set
			{
				if (this._property1 != value)
				{
					this._property1 = value;
					this.OnPropertyChanged("Property1");
				}
			}
		}
	}

	public class Item : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private bool _property2 = false;

		public bool Property2
		{
			get
			{
				return this._property2;
			}

			set
			{
				if (this._property2 != value)
				{
					this._property2 = value;
					this.OnPropertyChanged("Property2");
				}
			}
		}

		private string _property1 = string.Empty;

		public string Property1
		{
			get
			{
				return this._property1;
			}

			set
			{
				if (this._property1 != value)
				{
					this._property1 = value;
					this.OnPropertyChanged("Property1");
				}
			}
		}
	}

	public class ItemCollection : System.Collections.ObjectModel.ObservableCollection<Item>
	{ 
	}
#endif
}
